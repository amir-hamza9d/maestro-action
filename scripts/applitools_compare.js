/**
 * Applitools Visual Testing Integration Script for Maestro
 *
 * This script compares screenshots taken during test execution with baseline screenshots
 * using Applitools Eyes for advanced visual testing and reporting.
 *
 * Directory structure (same as existing system):
 * Screen-shots/
 * ├── Expected/  (baseline screenshots)
 * ├── Actual/    (screenshots captured during test runs)
 * └── Diff/      (difference images generated by the pixelmatch script)
 *
 * Dependencies:
 * - @applitools/eyes-images: For Applitools visual testing
 * - fs-extra: For enhanced file system operations
 */

const fs = require('fs-extra');
const path = require('path');
const { Eyes, BatchInfo, MatchLevel, ConsoleLogHandler } = require('@applitools/eyes-images');

// Load environment variables from .env file if it exists
try {
  const dotenvPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(dotenvPath)) {
    const dotenv = require('dotenv');
    dotenv.config({ path: dotenvPath });
    console.log('ℹ️ Loaded environment variables from .env file at:', dotenvPath);
  } else {
    console.log('ℹ️ No .env file found at:', dotenvPath);
    console.log('ℹ️ You can create one by copying .env.example:');
    console.log('ℹ️ cp .env.example .env');
    console.log('ℹ️ Then edit the .env file to add your Applitools API key');
  }
} catch (error) {
  console.log('ℹ️ Error loading .env file:', error.message);
}

// Directory paths (same as in compare_screenshots.js)
const BASE_DIR = path.join(process.cwd(), 'Screen-shots');
const EXPECTED_DIR = path.join(BASE_DIR, 'Expected');
const ACTUAL_DIR = path.join(BASE_DIR, 'Actual');

// Applitools configuration
const APPLITOOLS_API_KEY = process.env.APPLITOOLS_API_KEY;
const APP_NAME = process.env.APPLITOOLS_APP_NAME || 'Maestro App';
const BATCH_NAME = process.env.APPLITOOLS_BATCH_NAME || `Visual Tests - ${new Date().toISOString().split('T')[0]}`;
const MATCH_LEVEL = process.env.APPLITOOLS_MATCH_LEVEL || 'Strict';

// Debug mode - set to true to enable additional logging
const DEBUG = process.env.DEBUG === 'true';

// Check if directories exist
function checkDirectories() {
  console.log('✅ Checking if required directories exist...');
  if (!fs.existsSync(BASE_DIR)) {
    throw new Error(`❌ Screen-shots directory does not exist: ${BASE_DIR}`);
  }
  if (!fs.existsSync(EXPECTED_DIR)) {
    throw new Error(`❌ Expected screenshots directory does not exist: ${EXPECTED_DIR}`);
  }
  if (!fs.existsSync(ACTUAL_DIR)) {
    throw new Error(`❌ Actual screenshots directory does not exist: ${ACTUAL_DIR}`);
  }
  console.log('✅ All required directories exist.');
}

// Check if Applitools API key is set
function checkApiKey() {
  if (!APPLITOOLS_API_KEY) {
    throw new Error(`❌ APPLITOOLS_API_KEY environment variable is not set.

Please set it using one of these methods:

1. Create a .env file in the project root:
   cp .env.example .env
   Then edit the .env file to add your actual Applitools API key

2. Set it as an environment variable:
   export APPLITOOLS_API_KEY=your_api_key_here

3. Pass it directly when running the script:
   APPLITOOLS_API_KEY=your_api_key_here npm run applitools-compare

You can find your Applitools API key by logging into your Applitools account at:
https://eyes.applitools.com/ > Profile icon > My API Key`);
  }
  console.log('✅ Applitools API key is set.');
}

// Initialize Applitools Eyes
function initializeEyes() {
  const eyes = new Eyes();

  // Set API key
  eyes.setApiKey(APPLITOOLS_API_KEY);

  // Configure Eyes
  eyes.setLogHandler(new ConsoleLogHandler(DEBUG));

  // Set match level
  switch (MATCH_LEVEL.toLowerCase()) {
    case 'exact':
      eyes.setMatchLevel(MatchLevel.Exact);
      break;
    case 'strict':
      eyes.setMatchLevel(MatchLevel.Strict);
      break;
    case 'content':
      eyes.setMatchLevel(MatchLevel.Content);
      break;
    case 'layout':
      eyes.setMatchLevel(MatchLevel.Layout);
      break;
    default:
      eyes.setMatchLevel(MatchLevel.Strict);
  }

  // Set batch info
  eyes.setBatch(new BatchInfo(BATCH_NAME));

  return eyes;
}

// Compare images using Applitools
async function compareWithApplitools(eyes, expectedPath, actualPath, testName) {
  try {
    console.log(`🔍 Comparing with Applitools: Actual ${path.basename(actualPath)} with Baseline ${path.basename(expectedPath)}`);

    // Start a test
    await eyes.open(APP_NAME, testName);

    // Check the image
    const actualImage = fs.readFileSync(actualPath);

    // Log whether we're using an existing baseline or creating a new one
    if (fs.existsSync(expectedPath)) {
      console.log(`ℹ️ Baseline image exists: ${path.basename(expectedPath)}`);
      console.log(`ℹ️ Applitools will compare the actual image against its stored baseline`);
    } else {
      console.log(`ℹ️ No baseline image found in Expected directory. Applitools will create a new baseline from the actual image.`);
    }

    // Check the image against the Applitools baseline
    // Note: Applitools manages its own baselines in the cloud, so we don't need to explicitly set it
    await eyes.checkImage(actualImage, testName);

    // Close the test
    const testResults = await eyes.close(false);

    // Determine if there was a match based on test results
    const match = testResults && testResults.isPassed();

    return {
      match: match,
      error: null
    };
  } catch (error) {
    console.error(`❌ Error comparing images with Applitools: ${error.message}`);

    // Make sure to close the test even if there's an error
    try {
      await eyes.abortIfNotClosed();
    } catch (abortError) {
      console.error(`❌ Error aborting Applitools test: ${abortError.message}`);
    }

    return {
      match: false,
      error: error.message
    };
  }
}

// Main function to run the comparison
async function runApplitoolsComparison() {
  console.log('🚀 Starting Applitools visual testing...');

  try {
    // Check directories and API key
    checkDirectories();
    checkApiKey();

    // Initialize Applitools Eyes
    const eyes = initializeEyes();

    // Get all files in the Actual directory
    const actualFiles = fs.readdirSync(ACTUAL_DIR)
      .filter(file => file.toLowerCase().endsWith('.png'));

    if (actualFiles.length === 0) {
      console.log('⚠️ No actual screenshots found in Actual directory.');
      return;
    }

    console.log(`📊 Found ${actualFiles.length} actual screenshots.`);

    // Results tracking
    const results = {
      total: actualFiles.length,
      matched: 0,
      differences: 0,
      errors: 0
    };

    // Compare each actual file with Applitools
    for (const file of actualFiles) {
      const actualPath = path.join(ACTUAL_DIR, file);
      const expectedPath = path.join(EXPECTED_DIR, file);
      const testName = path.basename(file, '.png');

      // Compare images with Applitools
      const result = await compareWithApplitools(eyes, expectedPath, actualPath, testName);

      if (result.error) {
        results.errors++;
      } else if (result.match) {
        results.matched++;
        console.log(`✅ No differences found by Applitools for ${file}`);
      } else {
        results.differences++;
        console.log(`🔍 Differences found by Applitools for ${file}`);
      }
    }

    // Print summary
    console.log('\n📋 Applitools Visual Test Summary:');
    console.log(`📊 Total screenshots: ${results.total}`);
    console.log(`✅ Matching screenshots: ${results.matched}`);
    console.log(`🔍 Screenshots with differences: ${results.differences}`);
    console.log(`❌ Screenshots with errors: ${results.errors}`);

    // Return non-zero exit code if there are differences or errors
    if (results.differences > 0 || results.errors > 0) {
      console.log('\n❌ Applitools visual tests FAILED.');
      console.log('ℹ️ View detailed results in the Applitools dashboard: https://eyes.applitools.com/app/test-results/');
      process.exit(1);
    } else {
      console.log('\n✅ Applitools visual tests PASSED.');
      console.log('ℹ️ View detailed results in the Applitools dashboard: https://eyes.applitools.com/app/test-results/');
      process.exit(0);
    }
  } catch (error) {
    console.error(`❌ Unhandled error: ${error.message}`);
    process.exit(1);
  }
}

// Run the comparison
runApplitoolsComparison().catch(error => {
  console.error('❌ Unhandled error:', error);
  process.exit(1);
});
